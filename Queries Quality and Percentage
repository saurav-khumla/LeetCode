Table: Queries

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| query_name  | varchar |
| result      | varchar |
| position    | int     |
| rating      | int     |
+-------------+---------+
This table may have duplicate rows.
This table contains information collected from some queries on a database.
The position column has a value from 1 to 500.
The rating column has a value from 1 to 5. Query with rating less than 3 is a poor query.
 

We define query quality as:

The average of the ratio between query rating and its position.

We also define poor query percentage as:

The percentage of all queries with rating less than 3.

Write a solution to find each query_name, the quality and poor_query_percentage.

Both quality and poor_query_percentage should be rounded to 2 decimal places.

Return the result table in any order.

The result format is in the following example.

 

Example 1:

Input: 
Queries table:
+------------+-------------------+----------+--------+
| query_name | result            | position | rating |
+------------+-------------------+----------+--------+
| Dog        | Golden Retriever  | 1        | 5      |
| Dog        | German Shepherd   | 2        | 5      |
| Dog        | Mule              | 200      | 1      |
| Cat        | Shirazi           | 5        | 2      |
| Cat        | Siamese           | 3        | 3      |
| Cat        | Sphynx            | 7        | 4      |
+------------+-------------------+----------+--------+
Output: 
+------------+---------+-----------------------+
| query_name | quality | poor_query_percentage |
+------------+---------+-----------------------+
| Dog        | 2.50    | 33.33                 |
| Cat        | 0.66    | 33.33                 |
+------------+---------+-----------------------+


solution :

/* Write your T-SQL query statement below */
with cte as
        (select query_name,round(avg(rating/(position*1.0)),2) as avr,count(rating) as tr
           from Queries
       group by query_name
       ),
less_rating as 
        (select query_name,count(rating) as lr
          from Queries
         where rating<3 
      group by query_name
        )
        select cte.query_name,cte.avr as quality,coalesce(round((l.lr/(cte.tr*1.0))*100,2),0) as poor_query_percentage
          from cte
     left join less_rating as l 
            on cte.query_name = l.query_name
         where cte.query_name is not null

or



   /* Write your T-SQL query statement below */
SELECT query_name,
       ROUND(AVG(rating*1.00/position),2) AS quality,
       ROUND(AVG(CASE WHEN rating < 3 THEN 100.0 ELSE 0 END),2) AS poor_query_percentage
FROM Queries
WHERE query_name IS NOT NULL
GROUP BY query_name;                   

